{"ast":null,"code":"var _jsxFileName = \"/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventForm/EventForm.jsx\";\n\n/* global google */\nimport { Formik, Form } from 'formik';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { Button, Confirm, Header, Segment } from 'semantic-ui-react';\nimport { listenToEvents } from '../eventActions';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryData } from '../../../app/api/categoryOptions';\nimport MyDdateInput from '../../../app/common/form/MyDateInput';\nimport MyPlaceInput from '../../../app/common/form/MyPlaceInput';\nimport { addEventToFirestore, cancelEventToggle, listenToEventFromFirestore, updateEventInFirestore } from '../../../app/firestore/firestoreService';\nimport useFirestoreDoc from '../../../app/hooks/useFirestoreDoc';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { toast } from 'react-toastify'; // import { roundToNearestMinutes } from 'date-fns';\n\nexport default function EventForm({\n  match,\n  history\n}) {\n  const dispatch = useDispatch();\n  const [loadingCancel, setLoadingCancel] = useState(false);\n  const [confirmOpen, setConfirmOpen] = useState(false);\n  const {\n    selectedEvent\n  } = useSelector(state => state.event);\n  const {\n    loading,\n    error\n  } = useSelector(state => state.async);\n  const initialValues = selectedEvent !== null && selectedEvent !== void 0 ? selectedEvent : {\n    dest: '',\n    brMes: '',\n    date: '',\n    venue: {\n      address: '',\n      latLng: null\n    },\n    city: {\n      address: '',\n      latLng: null\n    }\n  };\n  const validationSchema = Yup.object({\n    dest: Yup.string().required('Мора да внесете дестинација'),\n    brMes: Yup.string().required('Мора да внесете број на места'),\n    date: Yup.string().required('Мора да внесете датум и врем на поаѓање'),\n    city: Yup.object().shape({\n      address: Yup.string().required('Мора да внесете град')\n    }),\n    venue: Yup.object().shape({\n      address: Yup.string().required('Мора да внесете adresa')\n    }),\n    description: Yup.string().required('Мора да внесете опис на патувањето')\n  });\n\n  async function handleCancleToggle(event) {\n    setConfirmOpen(false);\n    setLoadingCancel(true);\n\n    try {\n      await cancelEventToggle(event);\n      setLoadingCancel(false);\n    } catch (error) {\n      setLoadingCancel(true);\n      toast.error(error.message);\n    }\n  }\n\n  useFirestoreDoc({\n    shouldExecute: !!match.params.id,\n    query: () => listenToEventFromFirestore(match.params.id),\n    data: event => dispatch(listenToEvents([event])),\n    deps: [match.params.id, dispatch]\n  });\n  if (loading) return /*#__PURE__*/React.createElement(LoadingComponent, {\n    content: \"\\u041D\\u0430\\u0441\\u0442\\u0430\\u043D\\u043E\\u0442 \\u0441\\u0435 \\u0432\\u0447\\u0438\\u0442\\u0443\\u0432\\u0430...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 12\n    }\n  });\n  if (error) return /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  });\n  return /*#__PURE__*/React.createElement(Segment, {\n    clearing: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    content: selectedEvent ? 'Измени ја понудата' : 'Понуди релација',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: async (values, {\n      setSubmitting\n    }) => {\n      try {\n        selectedEvent ? await updateEventInFirestore(values) : await addEventToFirestore(values);\n        history.push('/events');\n      } catch (error) {\n        toast.error(error.message);\n        setSubmitting(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, ({\n    isSubmitting,\n    dirty,\n    isValid,\n    values\n  }) => /*#__PURE__*/React.createElement(Form, {\n    className: \"ui form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MySelectInput, {\n    name: \"dest\",\n    placeholder: \"\\u0418\\u0437\\u0431\\u0435\\u0440\\u0438 \\u0434\\u0435\\u0441\\u0442\\u0438\\u043D\\u0430\\u0446\\u0438\\u0458\\u0430\",\n    options: categoryData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MyTextInput, {\n    name: \"brMes\",\n    placeholder: \"\\u0412\\u043D\\u0435\\u0441\\u0438 \\u0431\\u0440\\u043E\\u0458 \\u043D\\u0430 \\u043F\\u043E\\u043D\\u0443\\u0434\\u0435\\u043D\\u0438 \\u043C\\u0435\\u0441\\u0442\\u0430\",\n    type: \"number\",\n    min: \"0\",\n    max: \"8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MyDdateInput, {\n    name: \"date\",\n    placeholderText: \"\\u0412\\u043D\\u0435\\u0441\\u0438 \\u0434\\u0430\\u0442\\u0443\\u043C \\u0438 \\u0432\\u0440\\u0435\\u043C\",\n    timeFormat: \"HH:mm\",\n    showTimeSelect: true,\n    timeCaption: \"time\",\n    dateFormat: \"MMMM d, yyyy H:mm \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MyPlaceInput, {\n    name: \"city\",\n    placeholder: \"\\u0412\\u043D\\u0435\\u0441\\u0438 \\u0433\\u0440\\u0430\\u0434 \\u043E\\u0434 \\u043A\\u043E\\u0458 \\u0441\\u0435 \\u043F\\u043E\\u0430\\u0453\\u0430\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MyPlaceInput, {\n    name: \"venue\",\n    disabled: !values.city.latLng,\n    placeholder: \"\\u0412\\u043D\\u0435\\u0441\\u0438 \\u0430\\u0434\\u0440\\u0435\\u0441\\u0430 \\u043D\\u0430 \\u043F\\u043E\\u0430\\u0453\\u0430\\u045A\\u0435\",\n    options: {\n      location: new google.maps.LatLng(values.city.latLng),\n      radius: 1000,\n      types: ['address']\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MyTextArea, {\n    name: \"description\",\n    placeholder: \"\\u041E\\u043F\\u0438\\u0441 \\u043D\\u0430 \\u043F\\u0430\\u0442\\u0443\\u0432\\u0430\\u045A\\u0435\\u0442\\u043E\",\n    rows: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }), selectedEvent && /*#__PURE__*/React.createElement(Button, {\n    loading: loadingCancel,\n    type: \"button\",\n    floated: \"left\",\n    color: selectedEvent.isCancelled ? 'green' : 'red',\n    content: selectedEvent.isCancelled ? 'Reactivate event' : 'Cancel Event',\n    onClick: () => setConfirmOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    loading: isSubmitting,\n    disabled: !isValid || !dirty || isSubmitting,\n    type: \"submit\",\n    floated: \"right\",\n    positive: true,\n    content: \"\\u041F\\u043E\\u0442\\u0432\\u0440\\u0434\\u0438\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    disabled: isSubmitting,\n    as: Link,\n    to: \"/events\",\n    type: \"submit\",\n    floated: \"right\",\n    content: \"\\u0418\\u0437\\u0431\\u0440\\u0438\\u0448\\u0438\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Confirm, {\n    content: (selectedEvent === null || selectedEvent === void 0 ? void 0 : selectedEvent.isCancelled) ? 'Ова ќе се реактивира! Дали навистина сакаш?' : 'Ова ќе го оневозможи настанот! Дали си сигурен во тоа?',\n    open: confirmOpen,\n    onCancel: () => setConfirmOpen(false),\n    onConfirm: () => handleCancleToggle(selectedEvent),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventForm/EventForm.jsx"],"names":["Formik","Form","React","useState","useDispatch","useSelector","Link","Redirect","Button","Confirm","Header","Segment","listenToEvents","Yup","MyTextInput","MyTextArea","MySelectInput","categoryData","MyDdateInput","MyPlaceInput","addEventToFirestore","cancelEventToggle","listenToEventFromFirestore","updateEventInFirestore","useFirestoreDoc","LoadingComponent","toast","EventForm","match","history","dispatch","loadingCancel","setLoadingCancel","confirmOpen","setConfirmOpen","selectedEvent","state","event","loading","error","async","initialValues","dest","brMes","date","venue","address","latLng","city","validationSchema","object","string","required","shape","description","handleCancleToggle","message","shouldExecute","params","id","query","data","deps","values","setSubmitting","push","isSubmitting","dirty","isValid","location","google","maps","LatLng","radius","types","isCancelled"],"mappings":"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","sourcesContent":["/* global google */\nimport { Formik, Form } from 'formik';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { Button, Confirm, Header, Segment } from 'semantic-ui-react';\nimport { listenToEvents } from '../eventActions';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryData } from '../../../app/api/categoryOptions';\nimport MyDdateInput from '../../../app/common/form/MyDateInput';\nimport MyPlaceInput from '../../../app/common/form/MyPlaceInput';\nimport {\n  addEventToFirestore,\n  cancelEventToggle,\n  listenToEventFromFirestore,\n  updateEventInFirestore,\n} from '../../../app/firestore/firestoreService';\nimport useFirestoreDoc from '../../../app/hooks/useFirestoreDoc';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { toast } from 'react-toastify';\n// import { roundToNearestMinutes } from 'date-fns';\n\nexport default function EventForm({ match, history }) {\n  const dispatch = useDispatch();\n  const [loadingCancel, setLoadingCancel] = useState(false);\n  const [confirmOpen, setConfirmOpen] = useState(false);\n  const {selectedEvent} = useSelector((state) => state.event);\n    \n  const { loading, error } = useSelector((state) => state.async);\n\n  const initialValues = selectedEvent ?? {\n    dest: '',\n    brMes: '',\n    date: '',\n    venue: {\n      address: '',\n      latLng: null,\n    },\n    city: {\n      address: '',\n      latLng: null,\n    },\n  };\n\n  const validationSchema = Yup.object({\n    dest: Yup.string().required('Мора да внесете дестинација'),\n    brMes: Yup.string().required('Мора да внесете број на места'),\n    date: Yup.string().required('Мора да внесете датум и врем на поаѓање'),\n    city: Yup.object().shape({\n      address: Yup.string().required('Мора да внесете град'),\n    }),\n    venue: Yup.object().shape({\n      address: Yup.string().required('Мора да внесете adresa'),\n    }),\n    description: Yup.string().required('Мора да внесете опис на патувањето'),\n  });\n  \n  async function handleCancleToggle(event) {\n    setConfirmOpen(false);\n    setLoadingCancel(true);\n    try {\n      await cancelEventToggle(event);\n      setLoadingCancel(false)\n    } catch (error) {\n      setLoadingCancel(true);\n      toast.error(error.message);\n    }\n  }\n\n  useFirestoreDoc({\n    shouldExecute: !!match.params.id, \n    query: () => listenToEventFromFirestore(match.params.id),\n    data: (event) => dispatch(listenToEvents([event])),\n    deps: [match.params.id, dispatch],\n  });\n\n  if (loading)\n    return <LoadingComponent content='Настанот се вчитува...' />;\n\n  if (error) return <Redirect to='/error' />;\n\n  return (\n    <Segment clearing>\n      <Header\n        content={selectedEvent ? 'Измени ја понудата' : 'Понуди релација'}\n      />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={async (values, { setSubmitting }) => {\n          try {\n            selectedEvent\n              ? await updateEventInFirestore(values)\n              : await addEventToFirestore(values);\n            history.push('/events');\n          } catch (error) {\n            toast.error(error.message);\n            setSubmitting(false);\n          }\n        }}\n      >\n        {({ isSubmitting, dirty, isValid, values }) => (\n          <Form className='ui form'>\n            <MySelectInput\n              name='dest'\n              placeholder='Избери дестинација'\n              options={categoryData}\n            />\n            <MyTextInput\n              name='brMes'\n              placeholder='Внеси број на понудени места'\n              type='number'\n              min='0'\n              max='8'\n            />\n            <MyDdateInput\n              name='date'\n              placeholderText='Внеси датум и врем'\n              timeFormat='HH:mm'\n              showTimeSelect\n              timeCaption='time'\n              dateFormat='MMMM d, yyyy H:mm '\n            />\n            <MyPlaceInput\n              name='city'\n              placeholder='Внеси град од кој се поаѓа'\n            />\n            <MyPlaceInput\n              name='venue'\n              disabled={!values.city.latLng}\n              placeholder='Внеси адреса на поаѓање'\n              options={{\n                location: new google.maps.LatLng(values.city.latLng),\n                radius: 1000,\n                types: ['address'],\n              }}\n            />\n            <MyTextArea\n              name='description'\n              placeholder='Опис на патувањето'\n              rows={3}\n            />\n            {selectedEvent &&\n              <Button\n              loading={loadingCancel}\n              type='button'\n              floated='left'\n              color={selectedEvent.isCancelled ? 'green' : 'red'}\n              content={selectedEvent.isCancelled ?  'Reactivate event' : 'Cancel Event' }\n              onClick={() => setConfirmOpen(true)}\n            />}\n            <Button\n              loading={isSubmitting}\n              disabled={!isValid || !dirty || isSubmitting}\n              type='submit'\n              floated='right'\n              positive\n              content='Потврди'\n            />\n            <Button\n              disabled={isSubmitting}\n              as={Link}\n              to='/events'\n              type='submit'\n              floated='right'\n              content='Избриши'\n            />\n          </Form>\n        )}\n      </Formik>\n      <Confirm \n      content={selectedEvent?.isCancelled ? 'Ова ќе се реактивира! Дали навистина сакаш?' : 'Ова ќе го оневозможи настанот! Дали си сигурен во тоа?'}\n      open={confirmOpen}\n      onCancel={() => setConfirmOpen(false)}\n      onConfirm={() => handleCancleToggle(selectedEvent)}\n      />\n    </Segment>\n  );\n}"]},"metadata":{},"sourceType":"module"}