{"ast":null,"code":"var _jsxFileName = \"/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventDetailed/EventDetailedChat.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Segment, Comment, Header } from 'semantic-ui-react';\nimport { firebaseObjectToArray, getEventChatRef } from '../../../app/firestore/firebaseService';\nimport { listenToEventChat } from '../eventActions';\nimport EventDetailedChatForm from './EventDetailedChatForm';\nimport { formatDistance } from 'date-fns';\nimport { CLEAR_COMMENTS } from '../eventConstants';\nexport default function EventDetailedChat({\n  eventId\n}) {\n  const dispatch = useDispatch();\n  const {\n    comments\n  } = useSelector(state => state.event);\n  const [showReplyForm, setShowReplyForm] = useState({\n    open: false,\n    commentId: null\n  });\n\n  function handleCloseReplyForm() {\n    setShowReplyForm({\n      open: false,\n      comment: null\n    });\n  }\n\n  useEffect(() => {\n    getEventChatRef(eventId).on('value', snapshot => {\n      if (!snapshot.exists()) return;\n      dispatch(listenToEventChat(firebaseObjectToArray(snapshot.val()).reverse()));\n    });\n    return () => {\n      dispatch({\n        type: CLEAR_COMMENTS\n      });\n      getEventChatRef().off();\n    };\n  }, [eventId, dispatch]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Segment, {\n    textAlign: \"center\",\n    attached: \"top\",\n    inverted: true,\n    color: \"teal\",\n    style: {\n      border: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"Chat about this event\")), /*#__PURE__*/React.createElement(Segment, {\n    attached: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(EventDetailedChatForm, {\n    eventId: eventId,\n    parentId: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Comment.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, createDataTree(comments.map(comment => /*#__PURE__*/React.createElement(Comment, {\n    key: comment.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Avatar, {\n    src: comment.photoURL || '/assets/user.png',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Comment.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Author, {\n    as: Link,\n    to: `/profile/${comment.uid}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 19\n    }\n  }, comment.displayName), /*#__PURE__*/React.createElement(Comment.Metadata, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, formatDistance(comment.date, new Date()))), /*#__PURE__*/React.createElement(Comment.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 19\n    }\n  }, comment.text.split('\\n').map((text, i) => /*#__PURE__*/React.createElement(\"span\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 23\n    }\n  }, text, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(Comment.Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Action, {\n    onClick: () => setShowReplyForm({\n      open: true,\n      commentId: comment.id\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }, \"\\u041E\\u0434\\u0433\\u043E\\u0432\\u043E\\u0440\\u0438\"), showReplyForm.open && showReplyForm.commentId === comment.id && /*#__PURE__*/React.createElement(EventDetailedChatForm, {\n    eventId: eventId,\n    parentId: comment.id,\n    closeForm: handleCloseReplyForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 25\n    }\n  }))), comment.childNodes.lenght > 0 && /*#__PURE__*/React.createElement(Comment.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 19\n    }\n  }, comment.childNodes.map(child => /*#__PURE__*/React.createElement(Comment, {\n    key: child.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Avatar, {\n    src: child.photoURL || '/assets/user.png',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Comment.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Author, {\n    as: Link,\n    to: `/profile/${child.uid}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 27\n    }\n  }, child.displayName), /*#__PURE__*/React.createElement(Comment.Metadata, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 29\n    }\n  }, formatDistance(child.date, new Date()))), /*#__PURE__*/React.createElement(Comment.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 27\n    }\n  }, child.text.split('\\n').map((text, i) => /*#__PURE__*/React.createElement(\"span\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 31\n    }\n  }, text, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 33\n    }\n  })))), /*#__PURE__*/React.createElement(Comment.Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Action, {\n    onClick: () => setShowReplyForm({\n      open: true,\n      commentId: child.id\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 29\n    }\n  }, \"\\u041E\\u0434\\u0433\\u043E\\u0432\\u043E\\u0440\\u0438\"), showReplyForm.open && showReplyForm.commentId === child.id && /*#__PURE__*/React.createElement(EventDetailedChatForm, {\n    eventId: eventId,\n    parentId: c.id,\n    closeForm: handleCloseReplyForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 33\n    }\n  }))))))))))));\n}","map":{"version":3,"sources":["/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventDetailed/EventDetailedChat.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","Link","Segment","Comment","Header","firebaseObjectToArray","getEventChatRef","listenToEventChat","EventDetailedChatForm","formatDistance","CLEAR_COMMENTS","EventDetailedChat","eventId","dispatch","comments","state","event","showReplyForm","setShowReplyForm","open","commentId","handleCloseReplyForm","comment","on","snapshot","exists","val","reverse","type","off","border","createDataTree","map","id","photoURL","uid","displayName","date","Date","text","split","i","childNodes","lenght","child","c"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Segment, Comment, Header } from 'semantic-ui-react';\nimport {\n  firebaseObjectToArray,\n  getEventChatRef,\n} from '../../../app/firestore/firebaseService';\nimport { listenToEventChat } from '../eventActions';\nimport EventDetailedChatForm from './EventDetailedChatForm';\nimport { formatDistance } from 'date-fns';\nimport { CLEAR_COMMENTS } from '../eventConstants';\n\nexport default function EventDetailedChat({ eventId }) {\n  const dispatch = useDispatch();\n  const { comments } = useSelector((state) => state.event);\n  const [showReplyForm, setShowReplyForm] = useState({\n    open: false,\n    commentId: null,\n  });\n\n  function handleCloseReplyForm() {\n    setShowReplyForm({ open: false, comment: null });\n  }\n\n  useEffect(() => {\n    getEventChatRef(eventId).on('value', (snapshot) => {\n      if (!snapshot.exists()) return;\n      dispatch(\n        listenToEventChat(firebaseObjectToArray(snapshot.val()).reverse())\n      );\n    });\n    return () => {\n      dispatch({ type: CLEAR_COMMENTS });\n      getEventChatRef().off();\n    };\n  }, [eventId, dispatch]);\n\n  return (\n    <>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: 'none' }}\n      >\n        <Header>Chat about this event</Header>\n      </Segment>\n\n      <Segment attached>\n        <EventDetailedChatForm eventId={eventId} parentId={0} />\n        <Comment.Group>\n          {createDataTree(\n            comments.map((comment) => (\n              <Comment key={comment.id}>\n                <Comment.Avatar src={comment.photoURL || '/assets/user.png'} />\n                <Comment.Content>\n                  <Comment.Author as={Link} to={`/profile/${comment.uid}`}>\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                    <div>{formatDistance(comment.date, new Date())}</div>\n                  </Comment.Metadata>\n                  <Comment.Text>\n                    {comment.text.split('\\n').map((text, i) => (\n                      <span key={i}>\n                        {text}\n                        <br />\n                      </span>\n                    ))}\n                  </Comment.Text>\n                  <Comment.Actions>\n                    <Comment.Action\n                      onClick={() =>\n                        setShowReplyForm({ open: true, commentId: comment.id })\n                      }\n                    >\n                      Одговори\n                    </Comment.Action>\n                    {showReplyForm.open &&\n                      showReplyForm.commentId === comment.id && (\n                        <EventDetailedChatForm\n                          eventId={eventId}\n                          parentId={comment.id}\n                          closeForm={handleCloseReplyForm}\n                        />\n                      )}\n                  </Comment.Actions>\n                </Comment.Content>\n                {comment.childNodes.lenght > 0 && (\n                  <Comment.Group>\n                    {comment.childNodes.map((child) => (\n                      <Comment key={child.id}>\n                        <Comment.Avatar\n                          src={child.photoURL || '/assets/user.png'}\n                        />\n                        <Comment.Content>\n                          <Comment.Author\n                            as={Link}\n                            to={`/profile/${child.uid}`}\n                          >\n                            {child.displayName}\n                          </Comment.Author>\n                          <Comment.Metadata>\n                            <div>\n                              {formatDistance(child.date, new Date())}\n                            </div>\n                          </Comment.Metadata>\n                          <Comment.Text>\n                            {child.text.split('\\n').map((text, i) => (\n                              <span key={i}>\n                                {text}\n                                <br />\n                              </span>\n                            ))}\n                          </Comment.Text>\n                          <Comment.Actions>\n                            <Comment.Action\n                              onClick={() =>\n                                setShowReplyForm({\n                                  open: true,\n                                  commentId: child.id,\n                                })\n                              }\n                            >\n                              Одговори\n                            </Comment.Action>\n                            {showReplyForm.open &&\n                              showReplyForm.commentId === child.id && (\n                                <EventDetailedChatForm\n                                  eventId={eventId}\n                                  parentId={c.id}\n                                  closeForm={handleCloseReplyForm}\n                                />\n                              )}\n                          </Comment.Actions>\n                        </Comment.Content>\n                      </Comment>\n                    ))}\n                  </Comment.Group>\n                )}\n              </Comment>\n            ))\n          )}\n        </Comment.Group>\n      </Segment>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}