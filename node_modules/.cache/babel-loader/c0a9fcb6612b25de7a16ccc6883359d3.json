{"ast":null,"code":"var _jsxFileName = \"/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventDashboard/EventsFeed.jsx\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Header, Segment, Feed } from 'semantic-ui-react';\nimport { getUserFeedRef, firebaseObjectToArray } from '../../../app/firestore/firebaseService';\nimport { listenToFeed } from '../../profiles/profileActions';\nimport EventFeedItem from './EventFeedItem';\nexport default function EventsFeed() {\n  const dispatch = useDispatch();\n  const {\n    feed\n  } = useSelector(state => state.profile);\n  useEffect(() => {\n    getUserFeedRef().on('value', snapshot => {\n      if (!snapshot.exists()) {\n        return;\n      }\n\n      const feed = firebaseObjectToArray(snapshot.val()).reverse();\n      dispatch(listenToFeed(feed));\n    });\n    return () => {\n      getUserFeedRef().off();\n    };\n  }, [dispatch]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    attached: true,\n    color: \"teal\",\n    icon: \"newspaper\",\n    content: \"\\u041D\\u043E\\u0432\\u043E\\u0441\\u0442\\u0438\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Segment, {\n    attached: \"]\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Feed, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, feed.map(post => /*#__PURE__*/React.createElement(EventFeedItem, {\n    post: post,\n    key: post.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 20\n    }\n  })))));\n}","map":{"version":3,"sources":["/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventDashboard/EventsFeed.jsx"],"names":["React","useEffect","useDispatch","useSelector","Header","Segment","Feed","getUserFeedRef","firebaseObjectToArray","listenToFeed","EventFeedItem","EventsFeed","dispatch","feed","state","profile","on","snapshot","exists","val","reverse","off","map","post","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,IAA1B,QAAsC,mBAAtC;AACA,SAASC,cAAT,EAAyBC,qBAAzB,QAAsD,wCAAtD;AACA,SAASC,YAAT,QAA6B,+BAA7B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,eAAe,SAASC,UAAT,GAAsB;AACrC,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM;AAACW,IAAAA;AAAD,MAASV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,OAAhB,CAA1B;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,cAAc,GAAGS,EAAjB,CAAoB,OAApB,EAA6BC,QAAQ,IAAI;AACrC,UAAG,CAACA,QAAQ,CAACC,MAAT,EAAJ,EAAuB;AACnB;AACH;;AACD,YAAML,IAAI,GAAGL,qBAAqB,CAACS,QAAQ,CAACE,GAAT,EAAD,CAArB,CAAsCC,OAAtC,EAAb;AACAR,MAAAA,QAAQ,CAACH,YAAY,CAACI,IAAD,CAAb,CAAR;AACH,KAND;AAOA,WAAO,MAAM;AACTN,MAAAA,cAAc,GAAGc,GAAjB;AACH,KAFD;AAGH,GAXQ,EAWN,CAACT,QAAD,CAXM,CAAT;AAaI,sBACI,uDACA,oBAAC,MAAD;AAAQ,IAAA,QAAQ,MAAhB;AAAiB,IAAA,KAAK,EAAC,MAAvB;AAA8B,IAAA,IAAI,EAAC,WAAnC;AAA+C,IAAA,OAAO,EAAC,4CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEA,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAC,GAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIC,IAAI,CAACS,GAAL,CAASC,IAAI,iBACV,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAEA,IAArB;AAA2B,IAAA,GAAG,EAAEA,IAAI,CAACC,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CADJ,CADJ,CAFA,CADJ;AAYH","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Header, Segment, Feed } from 'semantic-ui-react';\nimport { getUserFeedRef, firebaseObjectToArray } from '../../../app/firestore/firebaseService';\nimport { listenToFeed } from '../../profiles/profileActions';\nimport EventFeedItem from './EventFeedItem';\n\nexport default function EventsFeed() {\nconst dispatch = useDispatch();\nconst {feed} = useSelector(state => state.profile);\n\nuseEffect(() => {\n    getUserFeedRef().on('value', snapshot => {\n        if(!snapshot.exists()) {\n            return;\n        }\n        const feed = firebaseObjectToArray(snapshot.val()).reverse();\n        dispatch(listenToFeed(feed))\n    })\n    return () => {\n        getUserFeedRef().off()\n    }\n}, [dispatch])\n\n    return (\n        <>\n        <Header attached color='teal' icon='newspaper' content='Новости' />\n        <Segment attached=']' >\n            <Feed>\n               {feed.map(post => (\n                   <EventFeedItem post={post} key={post.id} />\n               ))}\n            </Feed>\n        </Segment>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}