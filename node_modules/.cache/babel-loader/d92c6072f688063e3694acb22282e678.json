{"ast":null,"code":"var _jsxFileName = \"/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventDetailed/EventDetailedChat.jsx\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Segment, Comment, Header } from 'semantic-ui-react';\nimport { firebaseObjectToArray, getEventChatRef } from '../../../app/firestore/firebaseService';\nimport { listenToEventChat } from '../eventActions';\nimport EventDetailedChatForm from './EventDetailedChatForm';\nimport { formatDistance } from 'date-fns';\nimport { CLEAR_COMMENTS } from '../eventConstants';\nexport default function EventDetailedChat({\n  eventId\n}) {\n  const dispatch = useDispatch();\n  const {\n    comments\n  } = useSelector(state => state.event);\n  const [showReplyForm, setShowReplyForm] = useSt(false);\n  useEffect(() => {\n    getEventChatRef(eventId).on('value', snapshot => {\n      if (!snapshot.exists()) return;\n      dispatch(listenToEventChat(firebaseObjectToArray(snapshot.val()).reverse()));\n    });\n    return () => {\n      dispatch({\n        type: CLEAR_COMMENTS\n      });\n      getEventChatRef().off();\n    };\n  }, [eventId, dispatch]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Segment, {\n    textAlign: \"center\",\n    attached: \"top\",\n    inverted: true,\n    color: \"teal\",\n    style: {\n      border: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"Chat about this event\")), /*#__PURE__*/React.createElement(Segment, {\n    attached: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(EventDetailedChatForm, {\n    eventId: eventId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Comment.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, comments.map(comment => /*#__PURE__*/React.createElement(Comment, {\n    key: comment.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Avatar, {\n    src: comment.photoURL || '/assets/user.png',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Comment.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Author, {\n    as: Link,\n    to: `/profile/${comment.uid}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  }, comment.displayName), /*#__PURE__*/React.createElement(Comment.Metadata, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, formatDistance(comment.date, new Date()))), /*#__PURE__*/React.createElement(Comment.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }, comment.text.split('\\n').map((text, i) => /*#__PURE__*/React.createElement(\"span\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, text, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 19\n    }\n  })))), /*#__PURE__*/React.createElement(Comment.Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Action, {\n    onClick: () => setShowReplyForm(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, \"\\u041E\\u0434\\u0433\\u043E\\u0432\\u043E\\u0440\\u0438\"), showReplyForm && /*#__PURE__*/React.createElement(EventDetailedChatForm, {\n    eventId: eventId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }))))))));\n}","map":{"version":3,"sources":["/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventDetailed/EventDetailedChat.jsx"],"names":["React","useEffect","useDispatch","useSelector","Link","Segment","Comment","Header","firebaseObjectToArray","getEventChatRef","listenToEventChat","EventDetailedChatForm","formatDistance","CLEAR_COMMENTS","EventDetailedChat","eventId","dispatch","comments","state","event","showReplyForm","setShowReplyForm","useSt","on","snapshot","exists","val","reverse","type","off","border","map","comment","id","photoURL","uid","displayName","date","Date","text","split","i"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Segment, Comment, Header } from 'semantic-ui-react';\nimport { firebaseObjectToArray, getEventChatRef } from '../../../app/firestore/firebaseService';\nimport { listenToEventChat } from '../eventActions';\nimport EventDetailedChatForm from './EventDetailedChatForm';\nimport {formatDistance} from 'date-fns'\nimport { CLEAR_COMMENTS } from '../eventConstants';\n\nexport default function EventDetailedChat({eventId}) {\n const dispatch = useDispatch();\n const {comments} = useSelector(state => state.event)\n const [showReplyForm, setShowReplyForm] = useSt(false);\n\nuseEffect(() =>{\n  getEventChatRef(eventId).on('value', snapshot => {\n    if (!snapshot.exists()) return;\n   dispatch(listenToEventChat(firebaseObjectToArray(snapshot.val()).reverse()));\n  });\n  return () =>  {\n    dispatch({type: CLEAR_COMMENTS});\n    getEventChatRef().off();\n  }\n},[eventId, dispatch])\n\n  return (\n    <>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: 'none' }}\n      >\n        <Header>Chat about this event</Header>\n      </Segment>\n\n      <Segment attached>\n      <EventDetailedChatForm eventId={eventId} />\n        <Comment.Group>\n          {comments.map(comment => (\n            <Comment key={comment.id}>\n            <Comment.Avatar src={comment.photoURL || '/assets/user.png'} />\n            <Comment.Content>\n              <Comment.Author as={Link} to={`/profile/${comment.uid}`} >{comment.displayName}</Comment.Author>\n              <Comment.Metadata>\n                <div>{formatDistance(comment.date, new Date())}</div>\n              </Comment.Metadata>\n              <Comment.Text>{comment.text.split('\\n').map((text, i) => (\n                <span key={i} >\n                  {text} \n                  <br />\n                </span>\n              ))}</Comment.Text>\n              <Comment.Actions>\n                <Comment.Action onClick={() =>  setShowReplyForm(true)} >Одговори</Comment.Action>\n                {showReplyForm && \n                <EventDetailedChatForm eventId={eventId} />\n                }\n              </Comment.Actions>\n            </Comment.Content>\n          </Comment>\n          ))}\n          \n        </Comment.Group>\n       \n      </Segment>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}