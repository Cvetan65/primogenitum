{"ast":null,"code":"var _jsxFileName = \"/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventDetailed/EventDetailedChat.jsx\";\nimport React, { useEffect } from 'react';\nimport { Segment, Comment, Header } from 'semantic-ui-react';\nimport EventDetailedChatForm from './EventDetailedChatForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getEventChatRef, firebaseObjectToArray } from '../../../app/firestore/firebaseService';\nimport { listenToEventChat } from '../eventActions';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\nimport { CLEAR_COMMENTS } from '../eventConstants';\nimport { useState } from 'react';\nimport { createDataTree } from '../../../app/common/util/util';\nexport default function EventDetailedChat({\n  eventId\n}) {\n  const dispatch = useDispatch();\n  const {\n    comments\n  } = useSelector(state => state.event);\n  const {\n    authenticated\n  } = useSelector(state => state.auth);\n  const [showReplyForm, setShowReplyForm] = useState({\n    open: false,\n    commentId: null\n  });\n\n  function handleCloseReplyForm() {\n    setShowReplyForm({\n      open: false,\n      commentId: null\n    });\n  }\n\n  useEffect(() => {\n    getEventChatRef(eventId).on('value', snapshot => {\n      if (!snapshot.exists()) return;\n      dispatch(listenToEventChat(firebaseObjectToArray(snapshot.val()).reverse()));\n    });\n    return () => {\n      dispatch({\n        type: CLEAR_COMMENTS\n      });\n      getEventChatRef().off();\n    };\n  }, [eventId, dispatch]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Segment, {\n    textAlign: \"center\",\n    attached: \"top\",\n    inverted: true,\n    color: \"teal\",\n    style: {\n      border: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, authenticated ? 'Разговор за овој настан' : 'Најави се за да можеш да гледаш или коментираш')), /*#__PURE__*/React.createElement(Segment, {\n    attached: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(EventDetailedChatForm, {\n    eventId: eventId,\n    parentId: 0,\n    closeForm: setShowReplyForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Comment.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, createDataTree(comments).map(comment => /*#__PURE__*/React.createElement(Comment, {\n    key: comment.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Avatar, {\n    src: comment.photoURL || '/assets/user.png',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Comment.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Author, {\n    as: Link,\n    to: `/profile/${comment.uid}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, comment.displayName), /*#__PURE__*/React.createElement(Comment.Metadata, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 19\n    }\n  }, formatDistance(comment.date, new Date()))), /*#__PURE__*/React.createElement(Comment.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, comment.text.split('\\n').map((text, i) => /*#__PURE__*/React.createElement(\"span\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, text, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 23\n    }\n  })))), /*#__PURE__*/React.createElement(Comment.Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Action, {\n    onClick: () => setShowReplyForm({\n      open: true,\n      commentId: comment.id\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 19\n    }\n  }, \"\\u041E\\u0434\\u0433\\u043E\\u0432\\u043E\\u0440\"), showReplyForm.open && showReplyForm.commentId === comment.id && /*#__PURE__*/React.createElement(EventDetailedChatForm, {\n    eventId: eventId,\n    parentId: comment.id,\n    closeForm: handleCloseReplyForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 23\n    }\n  }))), comment.childNodes.length > 0 && /*#__PURE__*/React.createElement(Comment.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, comment.childNodes.reverse().map(child => /*#__PURE__*/React.createElement(Comment, {\n    key: child.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Avatar, {\n    src: child.photoURL || '/assets/user.png',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Comment.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Author, {\n    as: Link,\n    to: `/profile/${child.uid}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }, child.displayName), /*#__PURE__*/React.createElement(Comment.Metadata, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 27\n    }\n  }, formatDistance(child.date, new Date()))), /*#__PURE__*/React.createElement(Comment.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  }, child.text.split('\\n').map((text, i) => /*#__PURE__*/React.createElement(\"span\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 29\n    }\n  }, text, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 31\n    }\n  })))), /*#__PURE__*/React.createElement(Comment.Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Action, {\n    onClick: () => setShowReplyForm({\n      open: true,\n      commentId: child.id\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 27\n    }\n  }, \"\\u041E\\u0434\\u0433\\u043E\\u0432\\u043E\\u0440\"), showReplyForm.open && showReplyForm.commentId === child.id && /*#__PURE__*/React.createElement(EventDetailedChatForm, {\n    eventId: eventId,\n    parentId: child.parentId,\n    closeForm: handleCloseReplyForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 31\n    }\n  })))))))))));\n}","map":{"version":3,"sources":["/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventDetailed/EventDetailedChat.jsx"],"names":["React","useEffect","Segment","Comment","Header","EventDetailedChatForm","useDispatch","useSelector","getEventChatRef","firebaseObjectToArray","listenToEventChat","Link","formatDistance","CLEAR_COMMENTS","useState","createDataTree","EventDetailedChat","eventId","dispatch","comments","state","event","authenticated","auth","showReplyForm","setShowReplyForm","open","commentId","handleCloseReplyForm","on","snapshot","exists","val","reverse","type","off","border","map","comment","id","photoURL","uid","displayName","date","Date","text","split","i","childNodes","length","child","parentId"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Segment, Comment, Header } from 'semantic-ui-react';\nimport EventDetailedChatForm from './EventDetailedChatForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getEventChatRef,\n  firebaseObjectToArray,\n} from '../../../app/firestore/firebaseService';\nimport { listenToEventChat } from '../eventActions';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\nimport { CLEAR_COMMENTS } from '../eventConstants';\nimport { useState } from 'react';\nimport { createDataTree } from '../../../app/common/util/util';\n\nexport default function EventDetailedChat({ eventId }) {\n  const dispatch = useDispatch();\n  const { comments } = useSelector((state) => state.event);\n  const { authenticated } = useSelector((state) => state.auth);\n  const [showReplyForm, setShowReplyForm] = useState({\n    open: false,\n    commentId: null,\n  });\n\n  function handleCloseReplyForm() {\n    setShowReplyForm({ open: false, commentId: null });\n  }\n\n  useEffect(() => {\n    getEventChatRef(eventId).on('value', (snapshot) => {\n      if (!snapshot.exists()) return;\n      dispatch(\n        listenToEventChat(firebaseObjectToArray(snapshot.val()).reverse())\n      );\n    });\n    return () => {\n      dispatch({ type: CLEAR_COMMENTS });\n      getEventChatRef().off();\n    };\n  }, [eventId, dispatch]);\n\n  return (\n    <>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: 'none' }}\n      >\n        <Header>{authenticated ? 'Разговор за овој настан' : 'Најави се за да можеш да гледаш или коментираш'}</Header>\n      </Segment>\n      {}\n      <Segment attached>\n        <EventDetailedChatForm\n          eventId={eventId}\n          parentId={0}\n          closeForm={setShowReplyForm}\n        />\n        <Comment.Group>\n          {createDataTree(comments).map((comment) => (\n            <Comment key={comment.id}>\n              <Comment.Avatar src={comment.photoURL || '/assets/user.png'} />\n              <Comment.Content>\n                <Comment.Author as={Link} to={`/profile/${comment.uid}`}>\n                  {comment.displayName}\n                </Comment.Author>\n                <Comment.Metadata>\n                  <div>{formatDistance(comment.date, new Date())}</div>\n                </Comment.Metadata>\n                <Comment.Text>\n                  {comment.text.split('\\n').map((text, i) => (\n                    <span key={i}>\n                      {text}\n                      <br />\n                    </span>\n                  ))}\n                </Comment.Text>\n                <Comment.Actions>\n                  <Comment.Action\n                    onClick={() =>\n                      setShowReplyForm({ open: true, commentId: comment.id })\n                    }\n                  >\n                    Одговор\n                  </Comment.Action>\n                  {showReplyForm.open &&\n                    showReplyForm.commentId === comment.id && (\n                      <EventDetailedChatForm\n                        eventId={eventId}\n                        parentId={comment.id}\n                        closeForm={handleCloseReplyForm}\n                      />\n                    )}\n                </Comment.Actions>\n              </Comment.Content>\n              {comment.childNodes.length > 0 && (\n                <Comment.Group>\n                  {comment.childNodes.reverse().map((child) => (\n                    <Comment key={child.id}>\n                      <Comment.Avatar\n                        src={child.photoURL || '/assets/user.png'}\n                      />\n                      <Comment.Content>\n                        <Comment.Author as={Link} to={`/profile/${child.uid}`}>\n                          {child.displayName}\n                        </Comment.Author>\n                        <Comment.Metadata>\n                          <div>{formatDistance(child.date, new Date())}</div>\n                        </Comment.Metadata>\n                        <Comment.Text>\n                          {child.text.split('\\n').map((text, i) => (\n                            <span key={i}>\n                              {text}\n                              <br />\n                            </span>\n                          ))}\n                        </Comment.Text>\n                        <Comment.Actions>\n                          <Comment.Action\n                            onClick={() =>\n                              setShowReplyForm({\n                                open: true,\n                                commentId: child.id,\n                              })\n                            }\n                          >\n                            Одговор\n                          </Comment.Action>\n                          {showReplyForm.open &&\n                            showReplyForm.commentId === child.id && (\n                              <EventDetailedChatForm\n                                eventId={eventId}\n                                parentId={child.parentId}\n                                closeForm={handleCloseReplyForm}\n                              />\n                            )}\n                        </Comment.Actions>\n                      </Comment.Content>\n                    </Comment>\n                  ))}\n                </Comment.Group>\n              )}\n            </Comment>\n          ))}\n        </Comment.Group>\n      </Segment>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}