{"ast":null,"code":"import { CREATE_EVENT, UPDATE_EVENT, DELETE_EVENT, FETCH_EVENTS, LISTEN_TO_EVENT_CHAT, LISTEN_TO_SELECTED_EVENT, CLEAR_EVENTS, SET_FILTER, SET_START_DATE } from './eventConstants';\nimport { asyncActionStart, asyncActionFinish, asyncActionError } from '../../app/async/asyncReducer';\nimport { dataFromSnapshot, fetchEventsFromFirestore } from '../../app/firestore/firestoreService';\nexport function fetchEvents(predicate, limit, lastDocSnapshot) {\n  return async function (dispatch) {\n    dispatch(asyncActionStart());\n\n    try {\n      const snapshot = await fetchEventsFromFirestore(predicate, limit, lastDocSnapshot).get();\n      const lastVisible = snapshot.docs[snapshot.docs.length - 1];\n      const moreEvents = snapshot.docs.length >= limit;\n      const events = snapshot.docs.map(doc => dataFromSnapshot(doc));\n      dispatch({\n        type: FETCH_EVENTS,\n        payload: {\n          events,\n          moreEvents\n        }\n      });\n      dispatch(asyncActionFinish());\n      return lastVisible;\n    } catch (error) {\n      dispatch(asyncActionError(error));\n    }\n  };\n}\nexport function setFilter(value) {\n  return function (dispatch) {\n    dispatch(clearEvents());\n    dispatch({\n      type: SET_FILTER,\n      payload: value\n    });\n  };\n}\nexport function setStartDate(date) {\n  return function (dispatch) {\n    dispatch(clearEvents());\n    dispatch({\n      type: SET_START_DATE,\n      payload: value\n    });\n  };\n}\nexport function listenToSelectedEvent(event) {\n  return {\n    type: LISTEN_TO_SELECTED_EVENT,\n    payload: event\n  };\n}\nexport function createEvent(event) {\n  return {\n    type: CREATE_EVENT,\n    payload: event\n  };\n}\nexport function updateEvent(event) {\n  return {\n    type: UPDATE_EVENT,\n    payload: event\n  };\n}\nexport function deleteEvent(eventId) {\n  return {\n    type: DELETE_EVENT,\n    payload: eventId\n  };\n}\nexport function listenToEventChat(comments) {\n  return {\n    type: LISTEN_TO_EVENT_CHAT,\n    payload: comments\n  };\n}\nexport function clearEvents() {\n  return {\n    type: CLEAR_EVENTS\n  };\n}","map":{"version":3,"sources":["/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventActions.js"],"names":["CREATE_EVENT","UPDATE_EVENT","DELETE_EVENT","FETCH_EVENTS","LISTEN_TO_EVENT_CHAT","LISTEN_TO_SELECTED_EVENT","CLEAR_EVENTS","SET_FILTER","SET_START_DATE","asyncActionStart","asyncActionFinish","asyncActionError","dataFromSnapshot","fetchEventsFromFirestore","fetchEvents","predicate","limit","lastDocSnapshot","dispatch","snapshot","get","lastVisible","docs","length","moreEvents","events","map","doc","type","payload","error","setFilter","value","clearEvents","setStartDate","date","listenToSelectedEvent","event","createEvent","updateEvent","deleteEvent","eventId","listenToEventChat","comments"],"mappings":"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","sourcesContent":["import { CREATE_EVENT, UPDATE_EVENT, DELETE_EVENT, FETCH_EVENTS, LISTEN_TO_EVENT_CHAT, LISTEN_TO_SELECTED_EVENT, CLEAR_EVENTS, SET_FILTER, SET_START_DATE } from './eventConstants';\nimport {asyncActionStart, asyncActionFinish, asyncActionError} from '../../app/async/asyncReducer';\nimport { dataFromSnapshot, fetchEventsFromFirestore } from '../../app/firestore/firestoreService';\n\nexport function fetchEvents(predicate, limit, lastDocSnapshot) {\n    return async function(dispatch) {\n        dispatch(asyncActionStart())\n        try {\n            const snapshot = await fetchEventsFromFirestore(predicate, limit, lastDocSnapshot).get();\n            const lastVisible = snapshot.docs[snapshot.docs.length-1];\n            const moreEvents = snapshot.docs.length >= limit;\n            const events = snapshot.docs.map(doc => dataFromSnapshot(doc));\n            dispatch({type: FETCH_EVENTS, payload: {events, moreEvents}});\n            dispatch(asyncActionFinish());\n            return lastVisible;\n        } catch (error) {\n            dispatch(asyncActionError(error));\n        }\n    }\n}\n\nexport function setFilter(value) {\n    return function(dispatch) {\n        dispatch(clearEvents());\n        dispatch({type: SET_FILTER, payload: value});\n    }\n}\n\nexport function setStartDate(date) {\n    return function(dispatch) {\n        dispatch(clearEvents());\n        dispatch({type: SET_START_DATE, payload: value});\n    }\n}\n\nexport function listenToSelectedEvent(event) {\n    return {\n        type: LISTEN_TO_SELECTED_EVENT,\n        payload: event\n    }\n}\n\nexport function createEvent(event) {\n    return {\n        type: CREATE_EVENT,\n        payload: event\n    }\n}\n\nexport function updateEvent(event) {\n    return {\n        type: UPDATE_EVENT,\n        payload: event\n    }\n}\n\nexport function deleteEvent(eventId) {\n    return {\n        type: DELETE_EVENT,\n        payload: eventId\n    }\n}\n\nexport function listenToEventChat(comments) {\n    return {\n        type: LISTEN_TO_EVENT_CHAT, \n        payload: comments\n    }\n}\n\nexport function clearEvents() {\n    return {\n        type: CLEAR_EVENTS,\n    };\n}"]},"metadata":{},"sourceType":"module"}