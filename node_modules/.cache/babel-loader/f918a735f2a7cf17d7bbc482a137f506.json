{"ast":null,"code":"var _jsxFileName = \"/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventDashboard/EventDashboard.jsx\";\nimport React, { useEffect } from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport EventList from './EventList';\nimport { useSelector, useDispatch } from 'react-redux';\nimport EventListItemPlaceholder from './EventListItemPlaceholder';\nimport EventFilters from './EventFilters';\nimport { fetchEvents } from '../eventActions';\nimport { useState } from 'react';\nimport EventsFeed from './EventsFeed';\nexport default function EventDashboard() {\n  const limit = 2;\n  const dispatch = useDispatch();\n  const {\n    events,\n    moreEvents\n  } = useSelector(state => state.event);\n  const {\n    loading\n  } = useSelector(state => state.async);\n  const {\n    authenticated\n  } = useSelector(state => state.auth);\n  const [lastDocSnapshot, setLastDocSnapshot] = useState(null);\n  const [loadingInitial, setLoadingInitial] = useState(false);\n  const [predicate, setPredicate] = useState(new Map([['startDate', new Date()], ['filter', 'all']]));\n\n  function handleSetPredicate(key, value) {\n    setPredicate(new Map(predicate.set(key, value)));\n  }\n\n  useEffect(() => {\n    setLoadingInitial(true);\n    dispatch(fetchEvents(predicate, limit)).then(lastVisible => {\n      setLastDocSnapshot(lastVisible);\n      setLoadingInitial(false);\n    });\n  }, [dispatch, predicate]);\n\n  function handleFetchNextEvents() {\n    dispatch(fetchEvents(predicate, lastDocSnapshot)).then(lastVisible => {\n      setLastDocSnapshot(lastVisible);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, loadingInitial && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EventListItemPlaceholder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(EventListItemPlaceholder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(EventList, {\n    events: events,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    loading: loading,\n    disabled: !moreEvents,\n    onClick: handleFetchNextEvents,\n    color: \"green\",\n    content: \"More\",\n    floated: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, authenticated && /*#__PURE__*/React.createElement(EventsFeed, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 27\n    }\n  }), /*#__PURE__*/React.createElement(EventFilters, {\n    predicate: predicate,\n    setPredicate: handleSetPredicate,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventDashboard/EventDashboard.jsx"],"names":["React","useEffect","Grid","Button","EventList","useSelector","useDispatch","EventListItemPlaceholder","EventFilters","fetchEvents","useState","EventsFeed","EventDashboard","limit","dispatch","events","moreEvents","state","event","loading","async","authenticated","auth","lastDocSnapshot","setLastDocSnapshot","loadingInitial","setLoadingInitial","predicate","setPredicate","Map","Date","handleSetPredicate","key","value","set","then","lastVisible","handleFetchNextEvents"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport EventList from './EventList';\nimport { useSelector, useDispatch } from 'react-redux';\nimport EventListItemPlaceholder from './EventListItemPlaceholder';\nimport EventFilters from './EventFilters';\nimport { fetchEvents } from '../eventActions';\n\nimport { useState } from 'react';\nimport EventsFeed from './EventsFeed';\n\nexport default function EventDashboard() {\n  const limit = 2;\n  const dispatch = useDispatch();\n  const { events, moreEvents } = useSelector((state) => state.event);\n  const { loading } = useSelector((state) => state.async);\n  const { authenticated } = useSelector((state) => state.auth);\n  const [lastDocSnapshot, setLastDocSnapshot] = useState(null);\n  const [loadingInitial, setLoadingInitial] = useState(false);\n  const [predicate, setPredicate] = useState(\n    new Map([\n      ['startDate', new Date()],\n      ['filter', 'all'],\n    ])\n  );\n\n  function handleSetPredicate(key, value) {\n    setPredicate(new Map(predicate.set(key, value)));\n  }\n\n  useEffect(() => {\n    setLoadingInitial(true);\n    dispatch(fetchEvents(predicate, limit)).then((lastVisible) => {\n      setLastDocSnapshot(lastVisible);\n      setLoadingInitial(false);\n    });\n  }, [dispatch, predicate]);\n\n  function handleFetchNextEvents() {\n    dispatch(fetchEvents(predicate, lastDocSnapshot)).then((lastVisible) => {\n      setLastDocSnapshot(lastVisible);\n    });\n  }\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        {loadingInitial && (\n          <>\n            <EventListItemPlaceholder />\n            <EventListItemPlaceholder />\n          </>\n        )}\n        <EventList events={events} />\n        <Button\n          loading={loading}\n          disabled={!moreEvents}\n          onClick={handleFetchNextEvents}\n          color='green'\n          content='More'\n          floated='right'\n        />\n      </Grid.Column>\n      <Grid.Column width={6}>\n        {authenticated && <EventsFeed />}\n        <EventFilters\n          predicate={predicate}\n          setPredicate={handleSetPredicate}\n          loading={loading}\n        />\n      </Grid.Column>\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}