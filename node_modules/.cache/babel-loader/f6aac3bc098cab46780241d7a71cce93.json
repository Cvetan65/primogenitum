{"ast":null,"code":"import { differenceInCalendarWeeksWithOptions } from 'date-fns/fp';\nexport function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport function getFileExtension(filename) {\n  return filename.slice((filename.lastIndexOf('.') - 1 >>> 0) + 2);\n}\nexport function createDataTree(dataset) {\n  let hashtable = Object.create(null);\n  dataset.forEach(a => hashtable[a.id] = { ...a,\n    childNodes: []\n  });\n  let dataTree = [];\n  dataset.forEach(a => {\n    if (a.parentId) hashtable[a.parentId].childNodes.push;\n  });\n}","map":{"version":3,"sources":["/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/app/common/util/util.js"],"names":["differenceInCalendarWeeksWithOptions","delay","ms","Promise","resolve","setTimeout","getFileExtension","filename","slice","lastIndexOf","createDataTree","dataset","hashtable","Object","create","forEach","a","id","childNodes","dataTree","parentId","push"],"mappings":"AAAA,SAASA,oCAAT,QAAqD,aAArD;AAEA,OAAO,SAASC,KAAT,CAAeC,EAAf,EAAmB;AACxB,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAnC,CAAP;AACD;AAED,OAAO,SAASI,gBAAT,CAA0BC,QAA1B,EAAoC;AACzC,SAAOA,QAAQ,CAACC,KAAT,CAAe,CAACD,QAAQ,CAACE,WAAT,CAAqB,GAArB,IAA2B,CAA3B,KAAiC,CAAlC,IAAuC,CAAtD,CAAP;AACD;AAED,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AACtC,MAAIC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAhB;AACAH,EAAAA,OAAO,CAACI,OAAR,CAAgBC,CAAC,IAAIJ,SAAS,CAACI,CAAC,CAACC,EAAH,CAAT,GAAkB,EAAC,GAAGD,CAAJ;AAAOE,IAAAA,UAAU,EAAE;AAAnB,GAAvC;AACA,MAAIC,QAAQ,GAAG,EAAf;AACAR,EAAAA,OAAO,CAACI,OAAR,CAAgBC,CAAC,IAAI;AACnB,QAAIA,CAAC,CAACI,QAAN,EAAgBR,SAAS,CAACI,CAAC,CAACI,QAAH,CAAT,CAAsBF,UAAtB,CAAiCG,IAAjC;AACjB,GAFD;AAID","sourcesContent":["import { differenceInCalendarWeeksWithOptions } from 'date-fns/fp';\n\nexport function delay(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function getFileExtension(filename) {\n  return filename.slice((filename.lastIndexOf('.') -1 >>> 0) + 2);\n}\n\nexport function createDataTree(dataset) {\n  let hashtable = Object.create(null);\n  dataset.forEach(a => hashtable[a.id] = {...a, childNodes: []});\n  let dataTree = [];\n  dataset.forEach(a => {\n    if (a.parentId) hashtable[a.parentId].childNodes.push\n  })\n  \n}"]},"metadata":{},"sourceType":"module"}