{"ast":null,"code":"var _jsxFileName = \"/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventDashboard/EventDashboard.jsx\";\nimport React, { useEffect } from 'react';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport EventList from './EventList';\nimport { useSelector, useDispatch } from 'react-redux';\nimport EventListItemPlaceholder from './EventListItemPlaceholder';\nimport EventFilters from './EventFilters';\nimport { clearEvents, fetchEvents } from '../eventActions';\nimport { useState } from 'react';\nimport EventsFeed from './EventsFeed';\nexport default function EventDashboard() {\n  const limit = 2;\n  const dispatch = useDispatch();\n  const {\n    events,\n    moreEvents,\n    filter,\n    startDate,\n    lastVisible,\n    retainState\n  } = useSelector(state => state.event);\n  const {\n    loading\n  } = useSelector(state => state.async);\n  const {\n    authenticated\n  } = useSelector(state => state.auth);\n  const [lastDocSnapshot, setLastDocSnapshot] = useState(null);\n  const [loadingInitial, setLoadingInitial] = useState(false);\n\n  function handleSetPredicate(key, value) {\n    dispatch(clearEvents());\n    setLastDocSnapshot(null);\n    setPredicate(new Map(predicate.set(key, value)));\n  }\n\n  useEffect(() => {\n    setLoadingInitial(true);\n    dispatch(fetchEvents(predicate, limit)).then(lastVisible => {\n      setLastDocSnapshot(lastVisible);\n      setLoadingInitial(false);\n    });\n    return () => {\n      dispatch(clearEvents());\n    };\n  }, [dispatch, predicate]);\n\n  function handleFetchNextEvents() {\n    dispatch(fetchEvents(predicate, limit, lastDocSnapshot)).then(lastVisible => {\n      setLastDocSnapshot(lastVisible);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    stackable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, loadingInitial && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EventListItemPlaceholder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(EventListItemPlaceholder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(EventList, {\n    events: events,\n    getNextEvents: handleFetchNextEvents,\n    loading: loading,\n    moreEvents: moreEvents,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, authenticated && /*#__PURE__*/React.createElement(EventsFeed, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 27\n    }\n  }), /*#__PURE__*/React.createElement(EventFilters, {\n    predicate: predicate,\n    setPredicate: handleSetPredicate,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    active: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventDashboard/EventDashboard.jsx"],"names":["React","useEffect","Grid","Loader","EventList","useSelector","useDispatch","EventListItemPlaceholder","EventFilters","clearEvents","fetchEvents","useState","EventsFeed","EventDashboard","limit","dispatch","events","moreEvents","filter","startDate","lastVisible","retainState","state","event","loading","async","authenticated","auth","lastDocSnapshot","setLastDocSnapshot","loadingInitial","setLoadingInitial","handleSetPredicate","key","value","setPredicate","Map","predicate","set","then","handleFetchNextEvents"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport EventList from './EventList';\nimport { useSelector, useDispatch } from 'react-redux';\nimport EventListItemPlaceholder from './EventListItemPlaceholder';\nimport EventFilters from './EventFilters';\nimport { clearEvents, fetchEvents } from '../eventActions';\nimport { useState } from 'react';\nimport EventsFeed from './EventsFeed';\n\nexport default function EventDashboard() {\n  const limit = 2;\n  const dispatch = useDispatch();\n  const { events, moreEvents, filter, startDate, lastVisible, retainState } = useSelector((state) => state.event);\n  const { loading } = useSelector((state) => state.async);\n  const { authenticated } = useSelector((state) => state.auth);\n  const [lastDocSnapshot, setLastDocSnapshot] = useState(null);\n  const [loadingInitial, setLoadingInitial] = useState(false);\n  \n\n  function handleSetPredicate(key, value) {\n    dispatch(clearEvents());\n    setLastDocSnapshot(null);\n    setPredicate(new Map(predicate.set(key, value)));\n  }\n\n  useEffect(() => {\n    setLoadingInitial(true);\n    dispatch(fetchEvents(predicate, limit)).then((lastVisible) => {\n      setLastDocSnapshot(lastVisible);\n      setLoadingInitial(false);\n    });\n    return () => {\n      dispatch(clearEvents());\n    };\n  }, [dispatch, predicate]);\n\n  function handleFetchNextEvents() {\n    dispatch(fetchEvents(predicate, limit, lastDocSnapshot)).then(\n      (lastVisible) => {\n        setLastDocSnapshot(lastVisible);\n      }\n    );\n  }\n\n  return (\n    <Grid stackable>\n      <Grid.Column width={10}>\n        {loadingInitial && (\n          <>\n            <EventListItemPlaceholder />\n            <EventListItemPlaceholder />\n          </>\n        )}\n        <EventList\n          events={events}\n          getNextEvents={handleFetchNextEvents}\n          loading={loading}\n          moreEvents={moreEvents}\n        />\n      </Grid.Column>\n      <Grid.Column width={6}>\n        {authenticated && <EventsFeed />}\n        <EventFilters\n          predicate={predicate}\n          setPredicate={handleSetPredicate}\n          loading={loading}\n        />\n      </Grid.Column>\n      <Grid.Column width={10}>\n        <Loader active={loading} />\n      </Grid.Column>\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}