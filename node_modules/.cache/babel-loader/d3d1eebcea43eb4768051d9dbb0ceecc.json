{"ast":null,"code":"import firebase from '../config/firebase';\nconst db = firebase.firestore();\nexport function dataFromSnapshot(snapshot) {\n  if (!snapshot.exists) return undefined;\n  const data = snapshot.data();\n\n  for (const prop in data) {\n    if (data.hasOwnProperty(prop)) {\n      if (data[prop] instanceof firebase.firestore.Timestamp) {\n        data[prop] = data[prop].toDate();\n      }\n    }\n  }\n\n  return { ...data,\n    id: snapshot.id\n  };\n}\nexport function fetchEventsFromFirestore(filter, startDate, limit, lastDocSnapshot = null) {\n  const user = firebase.auth().currentUser;\n  let eventsRef = db.collection('events').orderBy('date').startAfter(lastDocSnapshot).limit(limit);\n\n  switch (filter) {\n    case 'isGoing':\n      return eventsRef.where('attendeeIds', 'array-contains', user.uid).where('date', '>=', startDate);\n\n    case 'isHost':\n      return eventsRef.where('hostUid', '==', user.uid).where('date', '>=', startDate);\n\n    default:\n      return eventsRef.where('date', '>=', startDate);\n  }\n}\nexport function listenToEventFromFirestore(eventId) {\n  return db.collection('events').doc(eventId);\n}\nexport function addEventToFirestore(event) {\n  const user = firebase.auth().currentUser;\n  return db.collection('events').add({ ...event,\n    hostUid: user.uid,\n    hostedBy: user.displayName,\n    hostPhotoURL: user.photoURL || null,\n    attendees: firebase.firestore.FieldValue.arrayUnion({\n      id: user.uid,\n      displayName: user.displayName,\n      photoURL: user.photoURL || null\n    }),\n    attendeeIds: firebase.firestore.FieldValue.arrayUnion(user.uid)\n  });\n}\nexport function updateEventInFirestore(event) {\n  return db.collection('events').doc(event.id).update(event);\n}\nexport function deleteEventInFirestore(eventId) {\n  return db.collection('events').doc(eventId).delete();\n}\nexport function cancelEventToggle(event) {\n  return db.collection('events').doc(event.id).update({\n    isCancelled: !event.isCancelled\n  });\n}\nexport function setUserProfileData(user) {\n  return db.collection('users').doc(user.uid).set({\n    displayName: user.displayName,\n    email: user.email,\n    photoURL: user.photoURL || null,\n    createdAt: firebase.firestore.FieldValue.serverTimestamp()\n  });\n}\nexport function getUserProfile(userId) {\n  return db.collection('users').doc(userId);\n}\nexport async function updateUserProfile(profile) {\n  const user = firebase.auth().currentUser;\n\n  try {\n    if (user.displayName !== profile.displayName) {\n      await user.updateProfile({\n        displayName: profile.displayName\n      });\n    }\n\n    return await db.collection('users').doc(user.uid).update(profile);\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function updateUserProfilePhoto(downloadURL, filename) {\n  const user = firebase.auth().currentUser;\n  const userDocRef = db.collection('users').doc(user.uid);\n\n  try {\n    const userDoc = await userDocRef.get();\n\n    if (!userDoc.data().photoURL) {\n      await db.collection('users').doc(user.uid).update({\n        photoURL: downloadURL\n      });\n      await user.updateProfile({\n        photoURL: downloadURL\n      });\n    }\n\n    return await db.collection('users').doc(user.uid).collection('photos').add({\n      name: filename,\n      url: downloadURL\n    });\n  } catch (error) {\n    throw error;\n  }\n}\nexport function getUserPhotos(userUid) {\n  return db.collection('users').doc(userUid).collection('photos');\n}\nexport async function setMainPhoto(photo) {\n  const user = firebase.auth().currentUser;\n  const today = new Date();\n  const eventDocQuery = db.collection('events').where('attendeeIds', 'array-contains', user.uid).where('date', '>=', today);\n  const userFollowingRef = db.collection('following').doc(user.uid).collection('userFollowing');\n  const batch = db.batch();\n  batch.update(db.collection('users').doc(user.uid), {\n    photoURL: photo.url\n  });\n\n  try {\n    const eventsQuerySnap = await eventDocQuery.get();\n\n    for (let i = 0; i < eventsQuerySnap.docs.length; i++) {\n      let eventDoc = eventsQuerySnap.docs[i];\n\n      if (eventDoc.data().hostUid === user.uid) {\n        batch.update(eventsQuerySnap.docs[i].ref, {\n          hostPhotoURL: photo.url\n        });\n      }\n\n      batch.update(eventsQuerySnap.docs[i].ref, {\n        attendees: eventDoc.data().attendees.filter(attendee => {\n          if (attendee.id === user.uid) {\n            attendee.photoURL = photo.url;\n          }\n\n          return attendee;\n        })\n      });\n    }\n\n    const userFollowingSnap = await userFollowingRef.get();\n    userFollowingSnap.docs.forEach(docRef => {\n      let followingDocRef = db.collection('following').doc(docRef.id).collection('userFollowers').doc(user.uid);\n      batch.update(followingDocRef, {\n        photoURL: photo.url\n      });\n    });\n    await batch.commit();\n    return await user.updateProfile({\n      photoURL: photo.url\n    });\n  } catch (error) {\n    throw error;\n  }\n}\nexport function deletePhotoFromCollection(photoId) {\n  const userUid = firebase.auth().currentUser.uid;\n  return db.collection('users').doc(userUid).collection('photos').doc(photoId).delete();\n}\nexport function addUserAttendance(event) {\n  const user = firebase.auth().currentUser;\n  return db.collection('events').doc(event.id).update({\n    attendees: firebase.firestore.FieldValue.arrayUnion({\n      id: user.uid,\n      displayName: user.displayName,\n      photoURL: user.photoURL || null\n    }),\n    attendeeIds: firebase.firestore.FieldValue.arrayUnion(user.uid)\n  });\n}\nexport async function cancelUserAttendance(event) {\n  const user = firebase.auth().currentUser;\n\n  try {\n    const eventDoc = await db.collection('events').doc(event.id).get();\n    return db.collection('events').doc(event.id).update({\n      attendeeIds: firebase.firestore.FieldValue.arrayRemove(user.uid),\n      attendees: eventDoc.data().attendees.filter(attendee => attendee.id !== user.uid)\n    });\n  } catch (error) {\n    throw error;\n  }\n}\nexport function getUserEventsQuery(activeTab, userUid) {\n  let eventsRef = db.collection('events');\n  const today = new Date();\n\n  switch (activeTab) {\n    case 1:\n      // past events\n      return eventsRef.where('attendeeIds', 'array-contains', userUid).where('date', '<=', today).orderBy('date', 'desc');\n\n    case 2:\n      // hosting\n      return eventsRef.where('hostUid', '==', userUid).orderBy('date');\n\n    default:\n      return eventsRef.where('attendeeIds', 'array-contains', userUid).where('date', '>=', today).orderBy('date');\n  }\n}\nexport async function followUser(profile) {\n  const user = firebase.auth().currentUser;\n  const batch = db.batch();\n\n  try {\n    batch.set(db.collection('following').doc(user.uid).collection('userFollowing').doc(profile.id), {\n      displayName: profile.displayName,\n      photoURL: profile.photoURL,\n      uid: profile.id\n    });\n    batch.update(db.collection('users').doc(user.uid), {\n      followingCount: firebase.firestore.FieldValue.increment(1)\n    });\n    return await batch.commit();\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function unfollowUser(profile) {\n  const user = firebase.auth().currentUser;\n  const batch = db.batch();\n\n  try {\n    batch.delete(db.collection('following').doc(user.uid).collection('userFollowing').doc(profile.id));\n    batch.update(db.collection('users').doc(user.uid), {\n      followingCount: firebase.firestore.FieldValue.increment(-1)\n    });\n    return await batch.commit();\n  } catch (error) {\n    throw error;\n  }\n}\nexport function getFollowersCollection(profileId) {\n  return db.collection('following').doc(profileId).collection('userFollowers');\n}\nexport function getFollowingCollection(profileId) {\n  return db.collection('following').doc(profileId).collection('userFollowing');\n}\nexport function getFollowingDoc(profileId) {\n  const userUid = firebase.auth().currentUser.uid;\n  return db.collection('following').doc(userUid).collection('userFollowing').doc(profileId).get();\n}","map":{"version":3,"sources":["/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/app/firestore/firestoreService.js"],"names":["firebase","db","firestore","dataFromSnapshot","snapshot","exists","undefined","data","prop","hasOwnProperty","Timestamp","toDate","id","fetchEventsFromFirestore","filter","startDate","limit","lastDocSnapshot","user","auth","currentUser","eventsRef","collection","orderBy","startAfter","where","uid","listenToEventFromFirestore","eventId","doc","addEventToFirestore","event","add","hostUid","hostedBy","displayName","hostPhotoURL","photoURL","attendees","FieldValue","arrayUnion","attendeeIds","updateEventInFirestore","update","deleteEventInFirestore","delete","cancelEventToggle","isCancelled","setUserProfileData","set","email","createdAt","serverTimestamp","getUserProfile","userId","updateUserProfile","profile","updateProfile","error","updateUserProfilePhoto","downloadURL","filename","userDocRef","userDoc","get","name","url","getUserPhotos","userUid","setMainPhoto","photo","today","Date","eventDocQuery","userFollowingRef","batch","eventsQuerySnap","i","docs","length","eventDoc","ref","attendee","userFollowingSnap","forEach","docRef","followingDocRef","commit","deletePhotoFromCollection","photoId","addUserAttendance","cancelUserAttendance","arrayRemove","getUserEventsQuery","activeTab","followUser","followingCount","increment","unfollowUser","getFollowersCollection","profileId","getFollowingCollection","getFollowingDoc"],"mappings":"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","sourcesContent":["import firebase from '../config/firebase';\n\nconst db = firebase.firestore();\n\nexport function dataFromSnapshot(snapshot) {\n  if (!snapshot.exists) return undefined;\n  const data = snapshot.data();\n\n  for (const prop in data) {\n    if (data.hasOwnProperty(prop)) {\n      if (data[prop] instanceof firebase.firestore.Timestamp) {\n        data[prop] = data[prop].toDate();\n      }\n    }\n  }\n\n  return {\n    ...data,\n    id: snapshot.id,\n  };\n}\n\nexport function fetchEventsFromFirestore(\n  filter,\n  startDate,\n  limit,\n  lastDocSnapshot = null\n) {\n  const user = firebase.auth().currentUser;\n  let eventsRef = db\n    .collection('events')\n    .orderBy('date')\n    .startAfter(lastDocSnapshot)\n    .limit(limit);\n  switch (filter) {\n    case 'isGoing':\n      return eventsRef\n        .where('attendeeIds', 'array-contains', user.uid)\n        .where('date', '>=', startDate);\n    case 'isHost':\n      return eventsRef\n        .where('hostUid', '==', user.uid)\n        .where('date', '>=', startDate);\n    default:\n      return eventsRef.where('date', '>=', startDate);\n  }\n}\n\nexport function listenToEventFromFirestore(eventId) {\n  return db.collection('events').doc(eventId);\n}\n\nexport function addEventToFirestore(event) {\n  const user = firebase.auth().currentUser;\n  return db.collection('events').add({\n    ...event,\n    hostUid: user.uid,\n    hostedBy: user.displayName,\n    hostPhotoURL: user.photoURL || null,\n    attendees: firebase.firestore.FieldValue.arrayUnion({\n      id: user.uid,\n      displayName: user.displayName,\n      photoURL: user.photoURL || null,\n    }),\n    attendeeIds: firebase.firestore.FieldValue.arrayUnion(user.uid),\n  });\n}\n\nexport function updateEventInFirestore(event) {\n  return db.collection('events').doc(event.id).update(event);\n}\n\nexport function deleteEventInFirestore(eventId) {\n  return db.collection('events').doc(eventId).delete();\n}\n\nexport function cancelEventToggle(event) {\n  return db.collection('events').doc(event.id).update({\n    isCancelled: !event.isCancelled,\n  });\n}\n\nexport function setUserProfileData(user) {\n  return db\n    .collection('users')\n    .doc(user.uid)\n    .set({\n      displayName: user.displayName,\n      email: user.email,\n      photoURL: user.photoURL || null,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n}\n\nexport function getUserProfile(userId) {\n  return db.collection('users').doc(userId);\n}\n\nexport async function updateUserProfile(profile) {\n  const user = firebase.auth().currentUser;\n  try {\n    if (user.displayName !== profile.displayName) {\n      await user.updateProfile({\n        displayName: profile.displayName,\n      });\n    }\n    return await db.collection('users').doc(user.uid).update(profile);\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function updateUserProfilePhoto(downloadURL, filename) {\n  const user = firebase.auth().currentUser;\n  const userDocRef = db.collection('users').doc(user.uid);\n  try {\n    const userDoc = await userDocRef.get();\n    if (!userDoc.data().photoURL) {\n      await db.collection('users').doc(user.uid).update({\n        photoURL: downloadURL,\n      });\n      await user.updateProfile({\n        photoURL: downloadURL,\n      });\n    }\n    return await db.collection('users').doc(user.uid).collection('photos').add({\n      name: filename,\n      url: downloadURL,\n    });\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport function getUserPhotos(userUid) {\n  return db.collection('users').doc(userUid).collection('photos');\n}\n\nexport async function setMainPhoto(photo) {\n  const user = firebase.auth().currentUser;\n  const today = new Date();\n  const eventDocQuery = db\n    .collection('events')\n    .where('attendeeIds', 'array-contains', user.uid)\n    .where('date', '>=', today);\n  const userFollowingRef = db\n    .collection('following')\n    .doc(user.uid)\n    .collection('userFollowing');\n\n  const batch = db.batch();\n\n  batch.update(db.collection('users').doc(user.uid), {\n    photoURL: photo.url,\n  });\n\n  try {\n    const eventsQuerySnap = await eventDocQuery.get();\n    for (let i = 0; i < eventsQuerySnap.docs.length; i++) {\n      let eventDoc = eventsQuerySnap.docs[i];\n      if (eventDoc.data().hostUid === user.uid) {\n        batch.update(eventsQuerySnap.docs[i].ref, {\n          hostPhotoURL: photo.url,\n        });\n      }\n      batch.update(eventsQuerySnap.docs[i].ref, {\n        attendees: eventDoc.data().attendees.filter((attendee) => {\n          if (attendee.id === user.uid) {\n            attendee.photoURL = photo.url;\n          }\n          return attendee;\n        }),\n      });\n    }\n    const userFollowingSnap = await userFollowingRef.get();\n    userFollowingSnap.docs.forEach((docRef) => {\n      let followingDocRef = db\n        .collection('following')\n        .doc(docRef.id)\n        .collection('userFollowers')\n        .doc(user.uid);\n      batch.update(followingDocRef, {\n        photoURL: photo.url\n      })\n    });\n\n    await batch.commit();\n\n    return await user.updateProfile({\n      photoURL: photo.url,\n    });\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport function deletePhotoFromCollection(photoId) {\n  const userUid = firebase.auth().currentUser.uid;\n  return db\n    .collection('users')\n    .doc(userUid)\n    .collection('photos')\n    .doc(photoId)\n    .delete();\n}\n\nexport function addUserAttendance(event) {\n  const user = firebase.auth().currentUser;\n  return db\n    .collection('events')\n    .doc(event.id)\n    .update({\n      attendees: firebase.firestore.FieldValue.arrayUnion({\n        id: user.uid,\n        displayName: user.displayName,\n        photoURL: user.photoURL || null,\n      }),\n      attendeeIds: firebase.firestore.FieldValue.arrayUnion(user.uid),\n    });\n}\n\nexport async function cancelUserAttendance(event) {\n  const user = firebase.auth().currentUser;\n  try {\n    const eventDoc = await db.collection('events').doc(event.id).get();\n    return db\n      .collection('events')\n      .doc(event.id)\n      .update({\n        attendeeIds: firebase.firestore.FieldValue.arrayRemove(user.uid),\n        attendees: eventDoc\n          .data()\n          .attendees.filter((attendee) => attendee.id !== user.uid),\n      });\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport function getUserEventsQuery(activeTab, userUid) {\n  let eventsRef = db.collection('events');\n  const today = new Date();\n  switch (activeTab) {\n    case 1: // past events\n      return eventsRef\n        .where('attendeeIds', 'array-contains', userUid)\n        .where('date', '<=', today)\n        .orderBy('date', 'desc');\n    case 2: // hosting\n      return eventsRef.where('hostUid', '==', userUid).orderBy('date');\n    default:\n      return eventsRef\n        .where('attendeeIds', 'array-contains', userUid)\n        .where('date', '>=', today)\n        .orderBy('date');\n  }\n}\n\nexport async function followUser(profile) {\n  const user = firebase.auth().currentUser;\n  const batch = db.batch();\n  try {\n    batch.set(\n      db\n        .collection('following')\n        .doc(user.uid)\n        .collection('userFollowing')\n        .doc(profile.id),\n      {\n        displayName: profile.displayName,\n        photoURL: profile.photoURL,\n        uid: profile.id,\n      }\n    );\n    batch.update(db.collection('users').doc(user.uid), {\n      followingCount: firebase.firestore.FieldValue.increment(1),\n    });\n    return await batch.commit();\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function unfollowUser(profile) {\n  const user = firebase.auth().currentUser;\n  const batch = db.batch();\n  try {\n    batch.delete(\n      db\n        .collection('following')\n        .doc(user.uid)\n        .collection('userFollowing')\n        .doc(profile.id)\n    );\n\n    batch.update(db.collection('users').doc(user.uid), {\n      followingCount: firebase.firestore.FieldValue.increment(-1),\n    });\n\n    return await batch.commit();\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport function getFollowersCollection(profileId) {\n  return db.collection('following').doc(profileId).collection('userFollowers');\n}\n\nexport function getFollowingCollection(profileId) {\n  return db.collection('following').doc(profileId).collection('userFollowing');\n}\n\nexport function getFollowingDoc(profileId) {\n  const userUid = firebase.auth().currentUser.uid;\n  return db\n    .collection('following')\n    .doc(userUid)\n    .collection('userFollowing')\n    .doc(profileId)\n    .get();\n}"]},"metadata":{},"sourceType":"module"}