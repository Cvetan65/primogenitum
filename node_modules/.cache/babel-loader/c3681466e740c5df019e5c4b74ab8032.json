{"ast":null,"code":"var _jsxFileName = \"/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventDashboard/EventDashboard.jsx\";\nimport React, { useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport EventList from './EventList';\nimport { useSelector, useDispatch } from 'react-redux';\nimport EventListItemPlaceholder from './EventListItemPlaceholder';\nimport EventFilters from './EventFilters';\nimport { listenToEventsFromFirestore } from '../../../app/firestore/firestoreService';\nimport { fetchEvents, listenToEvents } from '../eventActions';\nimport useFirestoreCollection from '../../../app/hooks/useFirestoreCollection';\nimport { useState } from 'react';\nimport EventsFeed from './EventsFeed';\nexport default function EventDashboard() {\n  const limit = 2;\n  const dispatch = useDispatch();\n  const {\n    events\n  } = useSelector(state => state.event);\n  const {\n    loading\n  } = useSelector(state => state.async);\n  const {\n    authenticated\n  } = useSelector(state => state.auth);\n  const [lastDocSnapshot, setLastDocSnapshot] = useState(null);\n  const [predicate, setPredicate] = useState(new Map([['startDate', new Date()], ['filter', 'all']]));\n\n  function handleSetPredicate(key, value) {\n    setPredicate(new Map(predicate.set(key, value)));\n  }\n\n  useEffect(() => {\n    dispatch(fetchEvents(predicate, limit)).then(lastVisible => {\n      setLastDocSnapshot(lastVisible);\n    }, [dispatch, predicate]);\n  });\n\n  function handleFetchNextEvents() {\n    dispatch();\n  }\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, loading && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EventListItemPlaceholder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(EventListItemPlaceholder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(EventList, {\n    events: events,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid.Column, {\n    width: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, authenticated && /*#__PURE__*/React.createElement(EventsFeed, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(EventFilters, {\n    predicate: predicate,\n    setPredicate: handleSetPredicate,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/home/cvetan/Documents/AKTUELNO/PrevozSemanticUI/prevoz-cist/src/features/events/eventDashboard/EventDashboard.jsx"],"names":["React","useEffect","Grid","EventList","useSelector","useDispatch","EventListItemPlaceholder","EventFilters","listenToEventsFromFirestore","fetchEvents","listenToEvents","useFirestoreCollection","useState","EventsFeed","EventDashboard","limit","dispatch","events","state","event","loading","async","authenticated","auth","lastDocSnapshot","setLastDocSnapshot","predicate","setPredicate","Map","Date","handleSetPredicate","key","value","set","then","lastVisible","handleFetchNextEvents"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,2BAAT,QAA4C,yCAA5C;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,iBAA5C;AACA,OAAOC,sBAAP,MAAmC,2CAAnC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,eAAe,SAASC,cAAT,GAA0B;AACvC,QAAMC,KAAK,GAAG,CAAd;AACA,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAab,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACC,KAAlB,CAA9B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAchB,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACG,KAAlB,CAA/B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAoBlB,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACK,IAAlB,CAArC;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CACxC,IAAIgB,GAAJ,CAAQ,CACN,CAAC,WAAD,EAAc,IAAIC,IAAJ,EAAd,CADM,EAEN,CAAC,QAAD,EAAW,KAAX,CAFM,CAAR,CADwC,CAA1C;;AAOA,WAASC,kBAAT,CAA4BC,GAA5B,EAAiCC,KAAjC,EAAwC;AACtCL,IAAAA,YAAY,CAAC,IAAIC,GAAJ,CAAQF,SAAS,CAACO,GAAV,CAAcF,GAAd,EAAmBC,KAAnB,CAAR,CAAD,CAAZ;AACD;;AAED/B,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,QAAQ,CAACP,WAAW,CAACiB,SAAD,EAAYX,KAAZ,CAAZ,CAAR,CAAwCmB,IAAxC,CAA8CC,WAAD,IAAiB;AAC5DV,MAAAA,kBAAkB,CAACU,WAAD,CAAlB;AACD,KAFD,EAEE,CAACnB,QAAD,EAAWU,SAAX,CAFF;AAGD,GAJQ,CAAT;;AAMA,WAASU,qBAAT,GAAiC;AAC/BpB,IAAAA,QAAQ;AACT;;AAED,sBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,OAAO,iBACN,uDACE,oBAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFJ,eAOE,oBAAC,SAAD;AAAW,IAAA,MAAM,EAAEH,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,eAUE,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGK,aAAa,iBACZ,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAIE,oBAAC,YAAD;AACE,IAAA,SAAS,EAAEI,SADb;AAEE,IAAA,YAAY,EAAEI,kBAFhB;AAGE,IAAA,OAAO,EAAEV,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAVF,CADF;AAuBD","sourcesContent":["import React, { useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport EventList from './EventList';\nimport { useSelector, useDispatch } from 'react-redux';\nimport EventListItemPlaceholder from './EventListItemPlaceholder';\nimport EventFilters from './EventFilters';\nimport { listenToEventsFromFirestore } from '../../../app/firestore/firestoreService';\nimport { fetchEvents, listenToEvents } from '../eventActions';\nimport useFirestoreCollection from '../../../app/hooks/useFirestoreCollection';\nimport { useState } from 'react';\nimport EventsFeed from './EventsFeed';\n\nexport default function EventDashboard() {\n  const limit = 2;\n  const dispatch = useDispatch();\n  const { events } = useSelector((state) => state.event);\n  const { loading } = useSelector((state) => state.async);\n  const { authenticated } = useSelector((state) => state.auth);\n  const [lastDocSnapshot, setLastDocSnapshot] = useState(null);\n  const [predicate, setPredicate] = useState(\n    new Map([\n      ['startDate', new Date()],\n      ['filter', 'all'],\n    ])\n  );\n\n  function handleSetPredicate(key, value) {\n    setPredicate(new Map(predicate.set(key, value)));\n  }\n\n  useEffect(() => {\n    dispatch(fetchEvents(predicate, limit)).then((lastVisible) => {\n      setLastDocSnapshot(lastVisible)\n    },[dispatch, predicate])\n  })\n\n  function handleFetchNextEvents() {\n    dispatch()\n  }\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        {loading && (\n          <>\n            <EventListItemPlaceholder />\n            <EventListItemPlaceholder />\n          </>\n        )}\n        <EventList events={events} />\n      </Grid.Column>\n      <Grid.Column width={6}>\n        {authenticated &&\n          <EventsFeed />\n        }\n        <EventFilters\n          predicate={predicate}\n          setPredicate={handleSetPredicate}\n          loading={loading}\n        />\n      </Grid.Column>\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}